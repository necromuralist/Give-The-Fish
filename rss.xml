<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Give the Fish</title><link>https://necromuralist.github.io/Fish-Functions/</link><description>The functions of a fish.</description><atom:link href="https://necromuralist.github.io/Fish-Functions/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; 
&lt;div id="license"xmlns:cc="http://creativecommons.org/ns#" &gt;This work is licensed under
&lt;a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"&gt;
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"&gt;&lt;/a&gt;
&lt;/div&gt;
</copyright><lastBuildDate>Tue, 27 Jun 2023 19:42:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>SSH Agent Config Fragment</title><link>https://necromuralist.github.io/Fish-Functions/posts/ssh-agent-config-fragment/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org4703738" class="outline-2"&gt;
&lt;h2 id="org4703738"&gt;SSH Agent&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4703738"&gt;
&lt;p&gt;
This is the fragment to make sure the ssh-agent is running when you open the terminal.
&lt;/p&gt;

&lt;div class="notecard" id="org07f71cc"&gt;
&lt;p&gt;
Put this in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;.
&lt;/p&gt;

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;status&lt;/span&gt; --is-interactive
    keychain --eval --quiet --quick id_rsa &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The documentation for the &lt;a href="https://fishshell.com/docs/current/cmds/status.html"&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; comand says that &lt;code&gt;is-interactive&lt;/code&gt; is actually a sub-command (not an option, although I'm calling it like it is one) and that it:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Returns 0 if fish is interactive - that is, connected to a keyboard.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Which is an oddly unintuitive description. I think it means that it won't pass the conditional if I try to run the fragment as a function… I can't remember why I used it, exactly ,but I think it's something you need if you want it to be loaded when you login.
&lt;/p&gt;

&lt;p&gt;
Although the name &lt;a href="https://linux.die.net/man/1/keychain"&gt;keychain&lt;/a&gt; makes it sound like it's a general password manager, according to the man-page it's meant specifically to manage the ssh-agent. It will check if you already have an ssh-agent running and only start one if you don't. This way you don't end up starting one for every &lt;code&gt;screen&lt;/code&gt; you open up.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;--eval&lt;/code&gt; option sends the SSH-Agent message to stdout, &lt;code&gt;--quiet&lt;/code&gt; suppresses other messages, &lt;code&gt;--quick&lt;/code&gt; tells it to use a running ssh-agent if it finds one without verifying the keys and then we pipe it to &lt;a href="https://fishshell.com/docs/current/cmds/source.html"&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; to load the environment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf55165f" class="outline-2"&gt;
&lt;h2 id="orgf55165f"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf55165f"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;keychain(1) - Linux man page [Internet]. [cited 2023 Jun 24]. Available from: &lt;a href="https://linux.die.net/man/1/keychain"&gt;https://linux.die.net/man/1/keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;source - evaluate contents of file — fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 24]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/source.html"&gt;https://fishshell.com/docs/current/cmds/source.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;status - query fish runtime information — fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 24]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/status.html"&gt;https://fishshell.com/docs/current/cmds/status.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>configuration</category><category>ssh</category><guid>https://necromuralist.github.io/Fish-Functions/posts/ssh-agent-config-fragment/</guid><pubDate>Sat, 24 Jun 2023 19:47:47 GMT</pubDate></item><item><title>abbreviations.fish The Abbreviations Configuration</title><link>https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#org9b0bb3a"&gt;Nikola&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orgf81664c"&gt;New Posts and Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orgcefba9a"&gt;Build, Serve, and Develop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#org3646415"&gt;Deploy to Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#org270b864"&gt;Git&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orgcc24adb"&gt;Add, Commit, Push Stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orge321728"&gt;The State of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orge042819"&gt;Branch Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orgea7b543"&gt;My, How Things Have Changed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#org2e87863"&gt;Pass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#org9d9b078"&gt;Grep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/#orgdcb4c24"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="notecard" id="org464433c"&gt;
&lt;p&gt;
The abbreviations the file goes into &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;.
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
Abbreviations are sort of like aliases except fish will expand them once you hit space or enter. If, for example, you enter &lt;code&gt;nb&lt;/code&gt; ~ when you hit the space-bar fish will replace &lt;code&gt;nb&lt;/code&gt; with &lt;code&gt;nikola bulid&lt;/code&gt;. This makes them more transparent than functions, although they're also less powerful.
&lt;/p&gt;

&lt;p&gt;
According to &lt;a href="https://github.com/fish-shell/fish-shell/issues/3099"&gt;this github issue&lt;/a&gt; the files you put into &lt;code&gt;conf.d/&lt;/code&gt; get read before &lt;code&gt;config.fish&lt;/code&gt; so whatever you put in there is usable in &lt;code&gt;config.fish&lt;/code&gt; (and using &lt;code&gt;config.fish&lt;/code&gt;) at all is optional.
&lt;/p&gt;

&lt;div id="outline-container-org9b0bb3a" class="outline-2"&gt;
&lt;h2 id="org9b0bb3a"&gt;Nikola&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b0bb3a"&gt;
&lt;p&gt;
Abbreviations to hopefully make working with &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; a little quicker.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- n &lt;span class="s2"&gt;"nikola"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf81664c" class="outline-3"&gt;
&lt;h3 id="orgf81664c"&gt;New Posts and Pages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf81664c"&gt;
&lt;p&gt;
I only use org-mode so these are the commands to make new posts and pages.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- npost nikola new_post --format orgmode --title
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- npage nikola new_page --format orgmode --title
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
They actually look like the same files are produced, just one gets put into your pages folder and one gets put into your posts folder. Which is nice, I guess, in that we can move things back and forth between the blog and the web-pages as we need to.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcefba9a" class="outline-3"&gt;
&lt;h3 id="orgcefba9a"&gt;Build, Serve, and Develop&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcefba9a"&gt;
&lt;p&gt;
These are the ones I use the most when making posts and pages.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- nb &lt;span class="s2"&gt;"nikola build"&lt;/span&gt;
abbr --add -- nbs &lt;span class="s1"&gt;'nikola build; nikola serve'&lt;/span&gt;
abbr --add -- nauto &lt;span class="s2"&gt;"nikola auto"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;auto&lt;/code&gt;  will build and reload the page for you anytime it sees any changes. This can be convenient sometimes, but sometimes it detects changes to often (maybe when something is making a temporary backup) and it can end up reloading while you're reading the page so I don't use it as much as I used to.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3646415" class="outline-3"&gt;
&lt;h3 id="org3646415"&gt;Deploy to Github&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3646415"&gt;
&lt;p&gt;
And once it's ready…
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- ngd &lt;span class="s2"&gt;"nikola github_deploy"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org270b864" class="outline-2"&gt;
&lt;h2 id="org270b864"&gt;Git&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org270b864"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- g &lt;span class="s2"&gt;"git"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcc24adb" class="outline-3"&gt;
&lt;h3 id="orgcc24adb"&gt;Add, Commit, Push Stuff&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcc24adb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcf96375" class="outline-4"&gt;
&lt;h4 id="orgcf96375"&gt;Adding Files&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcf96375"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- add &lt;span class="s2"&gt;"git add"&lt;/span&gt;
abbr --add -- gaa &lt;span class="s2"&gt;"git add -A"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgaf81105" class="outline-4"&gt;
&lt;h4 id="orgaf81105"&gt;Are you ready for a commitment?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgaf81105"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- commit &lt;span class="s2"&gt;"git commit"&lt;/span&gt;
abbr --add -- gcm &lt;span class="s2"&gt;"git commit --message"&lt;/span&gt;
abbr --add -- amend &lt;span class="s2"&gt;"git commit --amend"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcaa9e5a" class="outline-4"&gt;
&lt;h4 id="orgcaa9e5a"&gt;Speak To The Gods On High&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcaa9e5a"&gt;
&lt;p&gt;
&lt;a href="https://man7.org/linux/man-pages/man2/sync.2.html"&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; is a builtin command (it writes caches to disk) so I went with &lt;code&gt;gsync&lt;/code&gt; for the abbreviation.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- push &lt;span class="s2"&gt;"git push"&lt;/span&gt;
abbr --add -- gsync &lt;span class="s2"&gt;"legit sync"&lt;/span&gt;
abbr --add -- publish &lt;span class="s2"&gt;"legit publish"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge321728" class="outline-3"&gt;
&lt;h3 id="orge321728"&gt;The State of Things&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge321728"&gt;
&lt;p&gt;
&lt;a href="https://fishshell.com/docs/current/cmds/status.html"&gt;&lt;code&gt;status&lt;/code&gt;&lt;/a&gt; gives you information about the fish-shell. This is the only thing I ever see, though.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
This is not a login shell
Job control: Only on interactive jobs
&lt;/pre&gt;


&lt;p&gt;
But, anyway, I went with &lt;code&gt;gstat&lt;/code&gt; to not block it in case it's really needed at some point.
&lt;/p&gt;

&lt;div class="notecard" id="orgcb16df2"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; Look at the &lt;a href="https://necromuralist.github.io/Fish-Functions/posts/ssh-agent-config-fragment/"&gt;SSH Agent Config Fragment&lt;/a&gt; post to see &lt;code&gt;status&lt;/code&gt; in use. It's probably meant for programming, not as a command-line command.
&lt;/p&gt;

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- state &lt;span class="s2"&gt;"git status -sb"&lt;/span&gt;
abbr --add -- gstat &lt;span class="s2"&gt;"git status"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge042819" class="outline-3"&gt;
&lt;h3 id="orge042819"&gt;Branch Work&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge042819"&gt;
&lt;p&gt;
&lt;a href="https://fishshell.com/docs/current/cmds/switch.html"&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt; is a built-in fish command to conditionally decide what to execute (like a chain of if-else statements).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- branches &lt;span class="s2"&gt;"legit branches"&lt;/span&gt;
abbr --add -- gswitch &lt;span class="s2"&gt;"legit switch"&lt;/span&gt;
abbr --add -- brls &lt;span class="s2"&gt;"git ls-tree --name-only -r"&lt;/span&gt;
abbr --add -- brlog &lt;span class="s2"&gt;"git log --oneline --abbrev-commit"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;" --all --graph --decorate --color"&lt;/span&gt;
abbr --add -- brlogall &lt;span class="s2"&gt;"git log --branches --graph"&lt;/span&gt;
abbr --add -- renamebranch &lt;span class="s2"&gt;"git branch -m"&lt;/span&gt;
abbr --add -- merge &lt;span class="s2"&gt;"git merge"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea7b543" class="outline-3"&gt;
&lt;h3 id="orgea7b543"&gt;My, How Things Have Changed&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgea7b543"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- codechanges &lt;span class="s2"&gt;"git log -p"&lt;/span&gt;
abbr --add -- logdiff &lt;span class="s2"&gt;"git log -p"&lt;/span&gt;
abbr --add -- gdiff &lt;span class="s2"&gt;"git diff"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2e87863" class="outline-2"&gt;
&lt;h2 id="org2e87863"&gt;Pass&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2e87863"&gt;
&lt;p&gt;
For &lt;a href="https://www.passwordstore.org/"&gt;pass&lt;/a&gt; the password-manager. I was doing the pull and push commands but decided to use the git &lt;code&gt;sync&lt;/code&gt; alias which is actuall calling &lt;code&gt;legit sync&lt;/code&gt;, which I think does pretty much the same as what I was doing. It does other stuff like stashing uncommitted changes, but that should never happen when using pass. Anyway. Sync.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- syncpass &lt;span class="s2"&gt;"pass git sync"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9d9b078" class="outline-2"&gt;
&lt;h2 id="org9d9b078"&gt;Grep&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d9b078"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abbr --add -- grepr &lt;span class="s2"&gt;"grep --color=always"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdcb4c24" class="outline-2"&gt;
&lt;h2 id="orgdcb4c24"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdcb4c24"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;abbr - manage fish abbreviations — fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 22]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/abbr.html"&gt;https://fishshell.com/docs/current/cmds/abbr.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;faho. Answer to “Fish shell; import config into main config” [Internet]. Stack Overflow. 2018 [cited 2023 Jun 23]. Available from: &lt;a href="https://stackoverflow.com/a/48749763"&gt;https://stackoverflow.com/a/48749763&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Document conf.d / config.fish sourcing order · Issue #3099 · fish-shell/fish-shell [Internet]. GitHub. [cited 2023 Jun 23]. Available from: &lt;a href="https://github.com/fish-shell/fish-shell/issues/3099"&gt;https://github.com/fish-shell/fish-shell/issues/3099&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>abbreviations</category><category>config</category><guid>https://necromuralist.github.io/Fish-Functions/posts/abbreviationsfish-the-abbreviations-configuration/</guid><pubDate>Fri, 23 Jun 2023 20:51:15 GMT</pubDate></item><item><title>config.fish The Fish Configuration</title><link>https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/#org662897b"&gt;Environment Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/#org473a1ce"&gt;Add Local Bin To the PATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/#org5c1203d"&gt;VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/#orga1b160a"&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
This is the fish configuration file. It goes into &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.
&lt;/p&gt;

&lt;div id="outline-container-org662897b" class="outline-2"&gt;
&lt;h2 id="org662897b"&gt;Environment Variables&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org662897b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; -x ALTERNATE_EDITOR &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x EDITOR &lt;span class="s2"&gt;"emacsclient -c"&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x VISUAL &lt;span class="s2"&gt;"emacsclient -c -a emacs"&lt;/span&gt;

&lt;span class="c"&gt;# wake monstery server&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x ATHENA &lt;span class="s2"&gt;"04:92:26:c3:a6:c7"&lt;/span&gt;

&lt;span class="c"&gt;# monstery LAN&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x APOLLO &lt;span class="s2"&gt;"192.168.86.172"&lt;/span&gt;

&lt;span class="c"&gt;# for extra docker build features (like smarter pip caching)&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x DOCKER_BUILDKIT 1

&lt;span class="c"&gt;# for clearing the startup restore session&lt;/span&gt;
&lt;span class="c"&gt;# so firefox doesn't try and open previous pages on startup&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x MOZILLA_PROFILE &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/snap/firefox/common/.mozilla/firefox/mg8ry5cl.default"&lt;/span&gt;

&lt;span class="c"&gt;# R Downloads&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; -x R_LIBS ~/.local/lib/R/library/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org473a1ce" class="outline-2"&gt;
&lt;h2 id="org473a1ce"&gt;Add Local Bin To the PATH&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org473a1ce"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# add to the path&lt;/span&gt;

&lt;span class="c"&gt;# https://fishshell.com/docs/current/cmds/fish_add_path.html&lt;/span&gt;
fish_add_path &lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5c1203d" class="outline-2"&gt;
&lt;h2 id="org5c1203d"&gt;VPN&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org5c1203d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# check the vpn&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;status&lt;/span&gt; --is-interactive
  protonvpn-cli &lt;span class="nb"&gt;status&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga1b160a" class="outline-2"&gt;
&lt;h2 id="orga1b160a"&gt;NPM&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga1b160a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# setup npm locally&lt;/span&gt;
&lt;span class="c"&gt;# from https://stackoverflow.com/a/13021677&lt;/span&gt;
&lt;span class="c"&gt;# expect you to also setup ~/.npmrc&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; --export NPM_PACKAGES &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.npm-packages
&lt;span class="k"&gt;set&lt;/span&gt; --export NODE_PATH &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.npm-packages/lib/node_modules
fish_add_path &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.npm-packages/bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>configuration</category><guid>https://necromuralist.github.io/Fish-Functions/posts/configfish-the-fish-configuration/</guid><pubDate>Thu, 22 Jun 2023 20:14:19 GMT</pubDate></item><item><title>rst2org Function</title><link>https://necromuralist.github.io/Fish-Functions/posts/rst2org-function/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; rst2org -d &lt;span class="s2"&gt;"Convert text file to org"&lt;/span&gt; --argument-names sourcefile
    &lt;span class="k"&gt;set&lt;/span&gt; target &lt;span class="nv"&gt;$(&lt;/span&gt;path change-extension org &lt;span class="nv"&gt;$sourcefile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    pandoc --standalone &lt;span class="nv"&gt;$sourcefile&lt;/span&gt; --output &lt;span class="nv"&gt;$target&lt;/span&gt; --wrap&lt;span class="o"&gt;=&lt;/span&gt;none
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This function will convert a text file to an org file using pandoc. I called it &lt;code&gt;rst2org&lt;/code&gt; because I created it specifically to convert restructured text, but since pandoc can infer it from the file extension it can be any input type that pandoc recognizes, I suppose.
&lt;/p&gt;

&lt;div id="outline-container-org9f87faa" class="outline-2"&gt;
&lt;h2 id="org9f87faa"&gt;What It's Doing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9f87faa"&gt;
&lt;p&gt;
The first thing the function does is change the file extension from whatever it is to "org". So whatever gets passed in as the argument should have an extension like ".rst". Then it runs pandoc.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--standalone&lt;/code&gt;: by default pandoc strips out the header and footer, this option tells it to keep it (useful for nikola and most other thing I would imagine)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--output&lt;/code&gt;: The output file name which pandoc also uses to guess the format we want to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--wrap=none&lt;/code&gt;: by default pandoc will insert line-breaks to keep the lines within their default width, adding this argument keeps long lines as single lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd821e2a" class="outline-2"&gt;
&lt;h2 id="orgd821e2a"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd821e2a"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;mb21. Answer to “Word to Markdown via pandoc: prevent line breaks in paragraphs” [Internet]. Stack Overflow. 2020 [cited 2023 Jun 22]. Available from: &lt;a href="https://stackoverflow.com/a/62990248"&gt;https://stackoverflow.com/a/62990248&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The first option documented in the options section of the pandoc documentation is &lt;code&gt;--from&lt;/code&gt; which then lists all the languages that pandoc can take as an input.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;pandoc general options [Internet]. Available from &lt;a href="https://pandoc.org/MANUAL.html#general-options"&gt;https://pandoc.org/MANUAL.html#general-options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>functions</category><category>org-mode</category><category>pandoc</category><guid>https://necromuralist.github.io/Fish-Functions/posts/rst2org-function/</guid><pubDate>Thu, 22 Jun 2023 19:51:54 GMT</pubDate></item><item><title>las: Colored List All</title><link>https://necromuralist.github.io/Fish-Functions/posts/las-colored-list-all/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; las
    ls --almost-all &lt;span class="se"&gt;\&lt;/span&gt;
       --color &lt;span class="se"&gt;\&lt;/span&gt;
       --dereference-command-line &lt;span class="se"&gt;\&lt;/span&gt;
       --human-readable &lt;span class="se"&gt;\&lt;/span&gt;
       -l &lt;span class="nv"&gt;$argv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	less --RAW-CONTROL-CHARS
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The point of this function is to show all the files in the directory (including hidden files) and pipe them to &lt;code&gt;less&lt;/code&gt; so they won't go scrolling off the screen while keeping the color highlighting.
&lt;/p&gt;

&lt;div id="outline-container-org3342b3a" class="outline-2"&gt;
&lt;h2 id="org3342b3a"&gt;The Parts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3342b3a"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org65074ed" class="outline-3"&gt;
&lt;h3 id="org65074ed"&gt;The &lt;code&gt;ls&lt;/code&gt; Arguments&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org65074ed"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--almost-all&lt;/code&gt;: don't list the &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--color&lt;/code&gt;: Color the output when (defaults to "always" but you can set to "auto" or "never")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dereference-command-line&lt;/code&gt;: follow symbolic links listed on the command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--human-readable&lt;/code&gt;: Put file sizes into units that make sense (when using &lt;code&gt;-l&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: Long listing format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org41c8aec" class="outline-3"&gt;
&lt;h3 id="org41c8aec"&gt;The &lt;code&gt;less&lt;/code&gt; Argument&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org41c8aec"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt;: Keep colors and hyperlink sequences.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notecard" id="orgbedc25b"&gt;
&lt;p&gt;
There is also a &lt;code&gt;--raw-control-chars&lt;/code&gt; option which will include all escape sequences, but they say this might cause less to not be able to control the appearance of the screen so they don't recommend using it. Also, you can set the &lt;code&gt;LESS&lt;/code&gt; environment variable to pass in options, so if this is useful enough it might make sense to put it in there instead.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>alias</category><category>color</category><category>functions</category><guid>https://necromuralist.github.io/Fish-Functions/posts/las-colored-list-all/</guid><pubDate>Thu, 22 Jun 2023 19:10:57 GMT</pubDate></item><item><title>Choose Function</title><link>https://necromuralist.github.io/Fish-Functions/posts/choose-function/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org6797785" class="outline-2"&gt;
&lt;h2 id="org6797785"&gt;Choose&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org6797785"&gt;
&lt;p&gt;
An alias function that will pick a random line (or lines) out of a text file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org02c5277" class="outline-2"&gt;
&lt;h2 id="org02c5277"&gt;The Function Declaration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org02c5277"&gt;
&lt;p&gt;
Our alias function (&lt;code&gt;choose&lt;/code&gt;) takes one required argument that we'll assign to the variable &lt;code&gt;filename&lt;/code&gt; and one optional argument &lt;code&gt;lines&lt;/code&gt; to indicate the number of lines to pull.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; choose -d &lt;span class="s2"&gt;"Random line from a file."&lt;/span&gt; --argument-names filename lines
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9b6227d" class="outline-2"&gt;
&lt;h2 id="org9b6227d"&gt;The Error String&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9b6227d"&gt;
&lt;p&gt;
I'm setting a string-format variable that I'll use to color error messages in bold red.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; ERROR &lt;span class="s2"&gt;"\x1b[31;1m\t%s\n\n\x1b[0m"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
See &lt;a href="https://stackoverflow.com/a/33206814"&gt;this stack overflow answer&lt;/a&gt; for more explanation of the codes. Basically the &lt;code&gt;31;1m&lt;/code&gt; part turns on red (31) and bold (1) and &lt;code&gt;0m&lt;/code&gt; resets it back to unbolded black text.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8ff6fb2" class="outline-2"&gt;
&lt;h2 id="org8ff6fb2"&gt;The Okay Variable&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8ff6fb2"&gt;
&lt;p&gt;
This is getting a little convoluted but I added another check for the second argument to make sure it's a number so this flag is just there to indicate that it did or didn't look like right.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm setting it to False so that it has to pass the checks in order to be unset.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2194fc5" class="outline-2"&gt;
&lt;h2 id="org2194fc5"&gt;Check the Number of Lines&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2194fc5"&gt;
&lt;p&gt;
Unlike &lt;code&gt;random&lt;/code&gt;, shuf will let you pick multiple lines so I added a second (optional) argument to indicate the number of lines to output. If none is passed in then it's set to one, if something other than an integer is passed in then we'll set a flag so we know to skip calling the &lt;code&gt;shuf&lt;/code&gt; command later on.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;test -n "$lines"&lt;/code&gt; will return True if &lt;code&gt;lines&lt;/code&gt; is non-empty so I negated it with &lt;code&gt;!&lt;/code&gt; to return True if it's empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; lines 1
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 1
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string match --regex &lt;span class="s2"&gt;"^[0-9]+\$"&lt;/span&gt; &lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt; &lt;span class="s2"&gt;"Not a valid number of lines: '&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 1
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org477e54e" class="outline-2"&gt;
&lt;h2 id="org477e54e"&gt;If It's a Text File, Use It&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org477e54e"&gt;
&lt;p&gt;
We'll be grabbing a line using the &lt;a href="https://man7.org/linux/man-pages/man1/shuf.1.html"&gt;shuf&lt;/a&gt; command. &lt;code&gt;shuf&lt;/code&gt; will hang if no filename is given and it will try and read binary files so first we have to test the filename to make sure it's a text file.
&lt;/p&gt;

&lt;p&gt;
To do the check I'm using the &lt;a href="https://www.man7.org/linux/man-pages/man1/file.1.html"&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt; command which will have the word "text" in the output if we give it a text file. Then I feed the output from &lt;code&gt;file&lt;/code&gt; to the &lt;code&gt;string match&lt;/code&gt; command. This command defaults to only return true if the whole string matches so I added a glob to both ends of the "text" string to match any string that contains it. So, in order to pass the test &lt;code&gt;filename&lt;/code&gt; has to have the name of a text file or we won't match the output of the &lt;code&gt;file&lt;/code&gt; command.
&lt;/p&gt;

&lt;p&gt;
First, though, we check if the &lt;code&gt;lines&lt;/code&gt; argument was okay and if it was and &lt;code&gt;filename&lt;/code&gt; passes its test then we can feed it to &lt;code&gt;shuf&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -ne 0&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string match &lt;span class="s2"&gt;"*text*"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;file &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
   shuf -n &lt;span class="nv"&gt;$lines&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;test $OKAY -ne 0&lt;/code&gt; will return True if OKAY != 0. It will return an error if OKAY holds something other than a number.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;; and&lt;/code&gt; syntax is a short-circuit syntax that won't run the second test if the first one fails.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org286bf08" class="outline-2"&gt;
&lt;h2 id="org286bf08"&gt;Handle the Errors&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org286bf08"&gt;
&lt;p&gt;
If the number of lines wasn't okay or the filename wasn't valid then we'll emit a help message. Since we emitted any error message about the number 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt;  &lt;span class="s2"&gt;"**Missing Filename**"&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -ne 0
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt; &lt;span class="s2"&gt;"Invalid File: '&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# check filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org88bee4d" class="outline-2"&gt;
&lt;h2 id="org88bee4d"&gt;Emit a Help Message&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org88bee4d"&gt;
&lt;p&gt;
If it had a valid number of lines and a valid filename then &lt;code&gt;OKAY&lt;/code&gt; will have a value of 1, otherwise it will have a value of 0 and we'll emit the help message.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt;     
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"\t%s\n"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
	 &lt;span class="s2"&gt;"Output a random line or lines from a text file."&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
	 &lt;span class="s2"&gt;"Usage:"&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
	 &lt;span class="s2"&gt;"    choose &amp;lt;filename&amp;gt; [&amp;lt;number of lines&amp;gt;]"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# help message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdbf51d0" class="outline-2"&gt;
&lt;h2 id="orgdbf51d0"&gt;One Last Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdbf51d0"&gt;
&lt;p&gt;
If the user passes in a flag as a filename this will get passed to the &lt;code&gt;file&lt;/code&gt; command and in some cases this will cause it to emit a help message which will get passed to the &lt;code&gt;shuf&lt;/code&gt; command. It's probably not a good idea to let that happen, but this was only supposed to be an alias so I wouldn't have to remember the syntax for &lt;code&gt;shuf&lt;/code&gt;, so hopefully it'll work okay.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgfbccf31" class="outline-2"&gt;
&lt;h2 id="orgfbccf31"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfbccf31"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;string-match - match substrings — fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/string-match.html"&gt;https://fishshell.com/docs/current/cmds/string-match.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;test - perform tests on files and text — fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/test.html"&gt;https://fishshell.com/docs/current/cmds/test.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;shuf(1) - Linux manual page [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://man7.org/linux/man-pages/man1/shuf.1.html"&gt;https://man7.org/linux/man-pages/man1/shuf.1.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;file(1) - Linux manual page [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://www.man7.org/linux/man-pages/man1/file.1.html"&gt;https://www.man7.org/linux/man-pages/man1/file.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>choice</category><category>functions</category><category>randomness</category><guid>https://necromuralist.github.io/Fish-Functions/posts/choose-function/</guid><pubDate>Wed, 07 Jun 2023 18:30:31 GMT</pubDate></item><item><title>Random Hex</title><link>https://necromuralist.github.io/Fish-Functions/posts/random-hex/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgcc7bb09"&gt;The randomdhex Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgc080041"&gt;The Function Header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#org8775950"&gt;Argument Check&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orga054016"&gt;Check For An Argument&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgd1ac295"&gt;Check If The Argument Is An Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgb52c593"&gt;Set the Argument Value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgd63a968"&gt;Error Message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgc1dcdcd"&gt;Use The Default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#org076ca13"&gt;Output the Random Hexadecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Fish-Functions/posts/random-hex/#orgd3a4ffd"&gt;Sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgcc7bb09" class="outline-2"&gt;
&lt;h2 id="orgcc7bb09"&gt;The randomdhex Function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcc7bb09"&gt;
&lt;p&gt;
This an alias function to output a random hexadecimal number. There are many ways to do this but I took this from &lt;a href="https://stackoverflow.com/a/53668354"&gt;a StackOverFlow answer&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc080041" class="outline-2"&gt;
&lt;h2 id="orgc080041"&gt;The Function Header&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc080041"&gt;
&lt;p&gt;
I'm going to create a function named &lt;code&gt;randomhex&lt;/code&gt; that takes one optional argument named &lt;code&gt;digits&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; randomhex -d &lt;span class="s2"&gt;"random hex string"&lt;/span&gt; --argument-names digits
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8775950" class="outline-2"&gt;
&lt;h2 id="org8775950"&gt;Argument Check&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8775950"&gt;
&lt;p&gt;
The first thing to do is to check if the user passed in an argument and handle it if they did or use a default if they didn't.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga054016" class="outline-3"&gt;
&lt;h3 id="orga054016"&gt;Check For An Argument&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga054016"&gt;
&lt;p&gt;
The first check uses the &lt;a href="https://fishshell.com/docs/current/cmds/test.html"&gt;test&lt;/a&gt; command to see if the user passed in an argument. the &lt;code&gt;-n&lt;/code&gt; flag tells it to check if there's a string with one or more characters in it in our &lt;code&gt;digits&lt;/code&gt; variable.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$digits&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# then an argument was passed in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd1ac295" class="outline-3"&gt;
&lt;h3 id="orgd1ac295"&gt;Check If The Argument Is An Integer&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd1ac295"&gt;
&lt;p&gt;
If the user &lt;i&gt;did&lt;/i&gt; pass in an argument but it can't be coerced to be an integer then our function won't work right so we need to see if the argument is made up of nothing but digits using the &lt;a href="https://fishshell.com/docs/current/cmds/string-match.html"&gt;string match&lt;/a&gt; command and a regular expression to make sure it's only made up of one or more digits.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string match --regex &lt;span class="s2"&gt;"^[0-9]+\$"&lt;/span&gt; &lt;span class="nv"&gt;$digits&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb52c593" class="outline-3"&gt;
&lt;h3 id="orgb52c593"&gt;Set the Argument Value&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb52c593"&gt;
&lt;p&gt;
If the argument was an integer then we'll set the &lt;code&gt;BYTES&lt;/code&gt; variable to half of whatever the user passed in, because each byte is represented by two hexadecimal digits (8 bits gives values from 0 to 255 in decimal, 00 to FF in hexadecimal). The argument is a string so we need to pass our division expression (&lt;code&gt;$digits/2&lt;/code&gt;) to the &lt;code&gt;math&lt;/code&gt; command in order for it to be evaluated as a number. Additionally, the division operator will return a float if the user's input isn't evenly divisible so I'll use the &lt;code&gt;ceil&lt;/code&gt; argument to round up to the nearest integer.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; BYTES &lt;span class="nv"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;math &lt;/span&gt;ceil &lt;span class="nv"&gt;$digits&lt;/span&gt;/2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd63a968" class="outline-3"&gt;
&lt;h3 id="orgd63a968"&gt;Error Message&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd63a968"&gt;
&lt;p&gt;
If the user passed in an argument but it doesn't look like an integer then we'll output a help message. I got the idea of using &lt;code&gt;printf&lt;/code&gt; this way from &lt;a href="https://stackoverflow.com/a/48249785"&gt;this StackOverflow answer&lt;/a&gt;.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Each line after the first gets passend into the first string, substituted where &lt;code&gt;%s&lt;/code&gt; is&lt;/li&gt;
&lt;li&gt;One backslash continues the input&lt;/li&gt;
&lt;li&gt;Two backslashes with a space in-between them will insert an extra line and continue the input&lt;/li&gt;
&lt;li&gt;The space between the backslashes is important - fish will throw an error if you put &lt;code&gt;\\&lt;/code&gt; instead of &lt;code&gt;\ \&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c"&gt;# the argument isn't an integer&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"\t%s\n"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="s2"&gt;"Output a random hexadecimal number"&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
   &lt;span class="s2"&gt;"Usage:"&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
   &lt;span class="s2"&gt;"randomhex &amp;lt;digits&amp;gt;"&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
   &lt;span class="s2"&gt;"Optional argument:"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="s2"&gt;" - Number of digits (will round up to even number)"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="s2"&gt;"   Argument must be an integer (default=8)."&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# if is-integer check&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc1dcdcd" class="outline-3"&gt;
&lt;h3 id="orgc1dcdcd"&gt;Use The Default&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc1dcdcd"&gt;
&lt;p&gt;
If the user didn't pass in an argument then use a default of 8 hexadecimal digits.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c"&gt;# Set our bytes so we have 8 digits (double the bytes)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; BYTES 4
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# setting the number of bytes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org076ca13" class="outline-2"&gt;
&lt;h2 id="org076ca13"&gt;Output the Random Hexadecimal&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org076ca13"&gt;
&lt;p&gt;
Finally we output the random hexadecimal number that &lt;a href="https://www.openssl.org/"&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/a&gt; generates.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$(&lt;/span&gt;openssl rand -hex &lt;span class="nv"&gt;$BYTES&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd3a4ffd" class="outline-2"&gt;
&lt;h2 id="orgd3a4ffd"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd3a4ffd"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;OpenSSL rand [Internet]. [cited 2023 Jun 5]. Available from: &lt;a href="https://www.openssl.org/docs/man1.1.1/man1/rand.html"&gt;https://www.openssl.org/docs/man1.1.1/man1/rand.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to get a random string of 32 hexadecimal digits through command line? [Internet]. Stack Overflow. 2015 [cited 2023 Jun 5]. Available from: &lt;a href="https://stackoverflow.com/q/34328759"&gt;https://stackoverflow.com/q/34328759&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>randomness</category><guid>https://necromuralist.github.io/Fish-Functions/posts/random-hex/</guid><pubDate>Tue, 06 Jun 2023 00:30:53 GMT</pubDate></item></channel></rss>