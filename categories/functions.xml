<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Give the Fish (Posts about functions)</title><link>https://necromuralist.github.io/Give-The-Fish/</link><description></description><atom:link href="https://necromuralist.github.io/Give-The-Fish/categories/functions.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2024 &lt;a href="mailto:cloisteredmonkey.jmark@slmail.me"&gt;Cloistered Monkey&lt;/a&gt; 
&lt;div id="license"xmlns:cc="http://creativecommons.org/ns#" &gt;This work is licensed under
&lt;a href="http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;"&gt;CC BY 4.0
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1"&gt;
&lt;img src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1"&gt;&lt;/a&gt;
&lt;/div&gt;
</copyright><lastBuildDate>Thu, 21 Nov 2024 01:47:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>To Webp Function</title><link>https://necromuralist.github.io/Give-The-Fish/posts/to-webp-function/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
A simple for loop to make using globs easier with cwebp.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; towebp -d &lt;span class="s2"&gt;"Convert image files to web with cweb"&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; SOURCE_IMAGE &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$argv&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; OUTPUT &lt;span class="o"&gt;(&lt;/span&gt;path change-extension webp &lt;span class="nv"&gt;$SOURCE_IMAGE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        cwebp &lt;span class="nv"&gt;$SOURCE_IMAGE&lt;/span&gt; -o &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm pretty sure I saw a one-liner to do this (using pipes) but it was hard to understand so I thought this would make it clearer to myself what is going on, rather than just copying a command I can't figure out.
&lt;/p&gt;</description><category>cli</category><category>functions</category><category>webp</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/to-webp-function/index.html</guid><pubDate>Thu, 21 Nov 2024 01:28:44 GMT</pubDate></item><item><title>Convert a Document To PDF With Pandoc</title><link>https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#orge4bc39a"&gt;What's This About?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#orgd9ecb54"&gt;Headers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#org17b54e4"&gt;Libertinus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#org7b3014b"&gt;Pagella&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#org20a0a29"&gt;The Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html#orge1b6975"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge4bc39a" class="outline-2"&gt;
&lt;h2 id="orge4bc39a"&gt;What's This About?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge4bc39a"&gt;
&lt;p&gt;
This is a function to help convert documents to PDF using pandoc. I was motivated to do this because the EPUB readers I tried (on Ubuntu) don't seem to do a good job of styling the text or providing the options to really let you do it (at least not easily through the GUI). Foliate seems to be the best for styling, but I occasionally run into EPUB files that it won't open so I thought it'd be useful to convert them to PDF sometimes.
&lt;/p&gt;

&lt;p&gt;
Pandoc will convert an ePub or other formatted file to PDF (using &lt;i&gt;pdflatex&lt;/i&gt;) without much configuration
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pandoc inputfile.epub -o output.pdf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
but it defaults to using &lt;a href="https://en.wikipedia.org/wiki/Computer_Modern"&gt;Computer Modern&lt;/a&gt;, making it look like those old Springer books in the library, so I thought I'd create this function to document how to change the font in case I forget later on.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd9ecb54" class="outline-2"&gt;
&lt;h2 id="orgd9ecb54"&gt;Headers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd9ecb54"&gt;
&lt;p&gt;
You can set the font as a command line argument to pandoc (e.g. &lt;code&gt;-V fontfamily:libertine&lt;/code&gt; ) but I thought it'd be better to create a tex header snippet so that I could add more configurations if I needed to.
&lt;/p&gt;

&lt;p&gt;
The function is going to assume that the pagella snippet is in a folder in &lt;code&gt;~/.config/fish/extras/&lt;/code&gt; which I created using a symlink to the &lt;code&gt;extras&lt;/code&gt; folder in this repository, but it'll also take a path to the header if it's given.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org17b54e4" class="outline-3"&gt;
&lt;h3 id="org17b54e4"&gt;Libertinus&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org17b54e4"&gt;
&lt;p&gt;
This is a font I ran into while searching around for instructions on changing the pandoc font. I'm not convinced it's better than Palatino, but it's better than Computer Modern, anyway.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;libertinus&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="na"&gt;[T1]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;fontenc&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;sectsty&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\sectionfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\clearpage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7b3014b" class="outline-3"&gt;
&lt;h3 id="org7b3014b"&gt;Pagella&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7b3014b"&gt;
&lt;p&gt;
The Libertine/Libertinus font wasn't really what I was looking for so I made Tex Gyre Pagella version as well.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;tgpagella&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="na"&gt;[T1]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;fontenc&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;sectsty&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\sectionfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\clearpage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="notecard" id="orge5fe192"&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I originally accidentally put &lt;i&gt;pagella&lt;/i&gt; and not &lt;i&gt;tgpagella&lt;/i&gt; which took me a while to trouble-shoot, so for the future remember - it's "Tex Gyre Pagella" not just "Pagella". Also it's &lt;i&gt;sectsty&lt;/i&gt; not &lt;i&gt;secsty&lt;/i&gt;.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org20a0a29" class="outline-2"&gt;
&lt;h2 id="org20a0a29"&gt;The Function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org20a0a29"&gt;
&lt;p&gt;
Nothing fancy here, it just adds the extra header file. I originally added the &lt;code&gt;--table-of-contents&lt;/code&gt; flag but it creates one from the EPUB anyway so that caused it to have two tables of contents.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; doc2pdf -d &lt;span class="s2"&gt;"Convert document to pdf with pandoc"&lt;/span&gt; --argument-names SOURCE HEADER
    &lt;span class="k"&gt;set&lt;/span&gt; TARGET &lt;span class="nv"&gt;$(&lt;/span&gt;path change-extension pdf &lt;span class="nv"&gt;$SOURCE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; -z &lt;span class="nv"&gt;$HEADER&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; HEADER ~/.config/fish/extras/pagella.tex
    &lt;span class="k"&gt;end&lt;/span&gt;

    pandoc --standalone &lt;span class="nv"&gt;$SOURCE&lt;/span&gt; --output &lt;span class="nv"&gt;$TARGET&lt;/span&gt; --include-in-header &lt;span class="nv"&gt;$HEADER&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge1b6975" class="outline-2"&gt;
&lt;h2 id="orge1b6975"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge1b6975"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://learnbyexample.github.io/customizing-pandoc/"&gt;learnbyexample&lt;/a&gt; : "Customizing pandoc to generate beautiful pdf and epub from markdown" - shows how to include extra tex header information and other pandoc options to customize PDF output&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tug.org/FontCatalogue/texgyrepagella/"&gt;Latex Font Catalogue&lt;/a&gt; : Tex Gyre Pagella page&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tug.org/FontCatalogue/linuxlibertine/"&gt;Latex Font Catalogue&lt;/a&gt; : Linux Libertine Page&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tug.org/FontCatalogue/libertinusserif/"&gt;Latex Font Catalogue&lt;/a&gt; : Libertinus Serif Page&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alerque/libertinus"&gt;GitHub&lt;/a&gt;: The Libertinus repository page&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Linux_Libertine"&gt;Wikipedia&lt;/a&gt; : Libertine and Libertinus information&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/rst2org-function/index.html"&gt;rst2org Function&lt;/a&gt;: Another function using pandoc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>functions</category><category>latex</category><category>pandoc</category><category>pdf</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/convert-a-document-to-pdf-with-pandoc/index.html</guid><pubDate>Tue, 28 Nov 2023 21:45:17 GMT</pubDate></item><item><title>Dim Monitor</title><link>https://necromuralist.github.io/Give-The-Fish/posts/dim-monitor/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; dim_monitor -d &lt;span class="s2"&gt;"Set monitor brightness"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --argument-names OUTPUT BRIGHTNESS

  &lt;span class="c"&gt;# -z : test for empty string&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; -z &lt;span class="nv"&gt;$BRIGHTNESS&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; BRIGHTNESS 0
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; -z &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt;
      &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"You must pass in the 'output' e.g. 'DVI-D-0'"&lt;/span&gt;
      &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Usage: dim_monitor OUTPUT BRIGHTNESS"&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;
       xrandr --output &lt;span class="nv"&gt;$OUTPUT&lt;/span&gt; --brightness &lt;span class="nv"&gt;$BRIGHTNESS&lt;/span&gt; --auto
   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>functions</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/dim-monitor/index.html</guid><pubDate>Thu, 05 Oct 2023 00:14:37 GMT</pubDate></item><item><title>Git Checkout File Function</title><link>https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents" role="doc-toc"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents" role="doc-toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html#orgd861710"&gt;Declaring the Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html#org62c3b58"&gt;Checkout the File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html#orgb96212a"&gt;Check If It Succeeded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html#org3b339d5"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd861710" class="outline-2"&gt;
&lt;h2 id="orgd861710"&gt;Declaring the Function&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd861710"&gt;
&lt;p&gt;
This is an alias function to checkout a file or folder from another branch, mostly as a place to document it since I keep forgetting the syntax.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; gitmefile -d &lt;span class="s2"&gt;"Checkout folder or file from another branch"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --argument-names BRANCH PATH_TO_FILE
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I originally called &lt;code&gt;PATH_TO_FILE&lt;/code&gt; but that of course clobbered the &lt;code&gt;PATH&lt;/code&gt; variable and all of a sudden it couldn't find git.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org62c3b58" class="outline-2"&gt;
&lt;h2 id="org62c3b58"&gt;Checkout the File&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org62c3b58"&gt;
&lt;p&gt;
This is the git command, nothing fancy, although trying to read the documentation didn't make it obvious to me that this is what you should do.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout &lt;span class="nv"&gt;$BRANCH&lt;/span&gt; -- &lt;span class="nv"&gt;$PATH_TO_FILE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb96212a" class="outline-2"&gt;
&lt;h2 id="orgb96212a"&gt;Check If It Succeeded&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb96212a"&gt;
&lt;p&gt;
The git error message when you pass it an unknown branch is &lt;code&gt;fatal: invalid reference: &amp;lt;branch&amp;gt;&lt;/code&gt; which, in context is relatively easy to figure out, but is a little obscure at first glance, so I'll add an extra message in case there is an error.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt; -ne 0
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"There was a git error using your arguments: branch='&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;' path='&lt;/span&gt;&lt;span class="nv"&gt;$PATH_TO_FILE&lt;/span&gt;&lt;span class="s2"&gt;'."&lt;/span&gt;

    string match --regex --quiet &lt;span class="s2"&gt;"(?&amp;lt;matched&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;git branch&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; -z &lt;span class="nv"&gt;$matched&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"No branch matches '&lt;/span&gt;&lt;span class="nv"&gt;$BRANCH&lt;/span&gt;&lt;span class="s2"&gt;'."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The option given to &lt;code&gt;string match&lt;/code&gt; tell fish to use regular expressions instead of the default glob-type expressions and to not echo any matches it finds to the screen. The arguments to &lt;code&gt;test&lt;/code&gt; don't have long-versions so I'll put them in a table to make it clearer.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Option&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-ne&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Not equal to&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;It is a &lt;i&gt;zero&lt;/i&gt; (empty) string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3b339d5" class="outline-2"&gt;
&lt;h2 id="org3b339d5"&gt;References&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3b339d5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;string-match - match substrings â fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 5]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/string-match.html"&gt;https://fishshell.com/docs/current/cmds/string-match.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;test - perform tests on files and text â fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/test.html"&gt;https://fishshell.com/docs/current/cmds/test.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>functions</category><category>git</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/git-checkout-file-function/index.html</guid><pubDate>Wed, 27 Sep 2023 19:38:49 GMT</pubDate></item><item><title>rst2org Function</title><link>https://necromuralist.github.io/Give-The-Fish/posts/rst2org-function/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; rst2org -d &lt;span class="s2"&gt;"Convert text file to org"&lt;/span&gt; --argument-names sourcefile
    &lt;span class="k"&gt;set&lt;/span&gt; target &lt;span class="nv"&gt;$(&lt;/span&gt;path change-extension org &lt;span class="nv"&gt;$sourcefile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    pandoc --standalone &lt;span class="nv"&gt;$sourcefile&lt;/span&gt; --output &lt;span class="nv"&gt;$target&lt;/span&gt; --wrap&lt;span class="o"&gt;=&lt;/span&gt;none
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This function will convert a text file to an org file using pandoc. I called it &lt;code&gt;rst2org&lt;/code&gt; because I created it specifically to convert restructured text, but since pandoc can infer it from the file extension it can be any input type that pandoc recognizes, I suppose.
&lt;/p&gt;

&lt;div id="outline-container-org8005818" class="outline-2"&gt;
&lt;h2 id="org8005818"&gt;What It's Doing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8005818"&gt;
&lt;p&gt;
The first thing the function does is change the file extension from whatever it is to "org". So whatever gets passed in as the argument should have an extension like ".rst". Then it runs pandoc.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--standalone&lt;/code&gt;: by default pandoc strips out the header and footer, this option tells it to keep it (useful for nikola and most other thing I would imagine)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--output&lt;/code&gt;: The output file name which pandoc also uses to guess the format we want to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--wrap=none&lt;/code&gt;: by default pandoc will insert line-breaks to keep the lines within their default width, adding this argument keeps long lines as single lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge6ec024" class="outline-2"&gt;
&lt;h2 id="orge6ec024"&gt;Links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge6ec024"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;mb21. Answer to âWord to Markdown via pandoc: prevent line breaks in paragraphsâ [Internet]. Stack Overflow. 2020 [cited 2023 Jun 22]. Available from: &lt;a href="https://stackoverflow.com/a/62990248"&gt;https://stackoverflow.com/a/62990248&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The first option documented in the options section of the pandoc documentation is &lt;code&gt;--from&lt;/code&gt; which then lists all the languages that pandoc can take as an input.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;pandoc general options [Internet]. Available from &lt;a href="https://pandoc.org/MANUAL.html#general-options"&gt;https://pandoc.org/MANUAL.html#general-options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>functions</category><category>org-mode</category><category>pandoc</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/rst2org-function/index.html</guid><pubDate>Thu, 22 Jun 2023 19:51:54 GMT</pubDate></item><item><title>las: Colored List All</title><link>https://necromuralist.github.io/Give-The-Fish/posts/las-colored-list-all/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; las
    ls --almost-all &lt;span class="se"&gt;\&lt;/span&gt;
       --color &lt;span class="se"&gt;\&lt;/span&gt;
       --dereference-command-line &lt;span class="se"&gt;\&lt;/span&gt;
       --human-readable &lt;span class="se"&gt;\&lt;/span&gt;
       -l &lt;span class="nv"&gt;$argv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        less --RAW-CONTROL-CHARS
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The point of this function is to show all the files in the directory (including hidden files) and pipe them to &lt;code&gt;less&lt;/code&gt; so they won't go scrolling off the screen while keeping the color highlighting.
&lt;/p&gt;

&lt;div id="outline-container-orged5f25e" class="outline-2"&gt;
&lt;h2 id="orged5f25e"&gt;The Parts&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orged5f25e"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5798bba" class="outline-3"&gt;
&lt;h3 id="org5798bba"&gt;The &lt;code&gt;ls&lt;/code&gt; Arguments&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5798bba"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--almost-all&lt;/code&gt;: don't list the &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--color&lt;/code&gt;: Color the output when (defaults to "always" but you can set to "auto" or "never")&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dereference-command-line&lt;/code&gt;: follow symbolic links listed on the command line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--human-readable&lt;/code&gt;: Put file sizes into units that make sense (when using &lt;code&gt;-l&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: Long listing format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org35ed6d1" class="outline-3"&gt;
&lt;h3 id="org35ed6d1"&gt;The &lt;code&gt;less&lt;/code&gt; Argument&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org35ed6d1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--RAW-CONTROL-CHARS&lt;/code&gt;: Keep colors and hyperlink sequences.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="notecard" id="org5ccda07"&gt;
&lt;p&gt;
There is also a &lt;code&gt;--raw-control-chars&lt;/code&gt; option which will include all escape sequences, but they say this might cause less to not be able to control the appearance of the screen so they don't recommend using it. Also, you can set the &lt;code&gt;LESS&lt;/code&gt; environment variable to pass in options, so if this is useful enough it might make sense to put it in there instead.
&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>alias</category><category>color</category><category>functions</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/las-colored-list-all/index.html</guid><pubDate>Thu, 22 Jun 2023 19:10:57 GMT</pubDate></item><item><title>Choose Function</title><link>https://necromuralist.github.io/Give-The-Fish/posts/choose-function/index.html</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="outline-container-org2aff80b" class="outline-2"&gt;
&lt;h2 id="org2aff80b"&gt;Choose&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2aff80b"&gt;
&lt;p&gt;
An alias function that will pick a random line (or lines) out of a text file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org887fe7d" class="outline-2"&gt;
&lt;h2 id="org887fe7d"&gt;The Function Declaration&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org887fe7d"&gt;
&lt;p&gt;
Our alias function (&lt;code&gt;choose&lt;/code&gt;) takes one required argument that we'll assign to the variable &lt;code&gt;filename&lt;/code&gt; and one optional argument &lt;code&gt;lines&lt;/code&gt; to indicate the number of lines to pull.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; choose -d &lt;span class="s2"&gt;"Random line from a file."&lt;/span&gt; --argument-names filename lines
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org56a9bc3" class="outline-2"&gt;
&lt;h2 id="org56a9bc3"&gt;The Error String&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org56a9bc3"&gt;
&lt;p&gt;
I'm setting a string-format variable that I'll use to color error messages in bold red.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; ERROR &lt;span class="s2"&gt;"\x1b[31;1m\t%s\n\n\x1b[0m"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
See &lt;a href="https://stackoverflow.com/a/33206814"&gt;this stack overflow answer&lt;/a&gt; for more explanation of the codes. Basically the &lt;code&gt;31;1m&lt;/code&gt; part turns on red (31) and bold (1) and &lt;code&gt;0m&lt;/code&gt; resets it back to unbolded black text.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org771c3ea" class="outline-2"&gt;
&lt;h2 id="org771c3ea"&gt;The Okay Variable&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org771c3ea"&gt;
&lt;p&gt;
This is getting a little convoluted but I added another check for the second argument to make sure it's a number so this flag is just there to indicate that it did or didn't look like right.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm setting it to False so that it has to pass the checks in order to be unset.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3e2043a" class="outline-2"&gt;
&lt;h2 id="org3e2043a"&gt;Check the Number of Lines&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3e2043a"&gt;
&lt;p&gt;
Unlike &lt;code&gt;random&lt;/code&gt;, shuf will let you pick multiple lines so I added a second (optional) argument to indicate the number of lines to output. If none is passed in then it's set to one, if something other than an integer is passed in then we'll set a flag so we know to skip calling the &lt;code&gt;shuf&lt;/code&gt; command later on.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;test -n "$lines"&lt;/code&gt; will return True if &lt;code&gt;lines&lt;/code&gt; is non-empty so I negated it with &lt;code&gt;!&lt;/code&gt; to return True if it's empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; lines 1
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 1
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string match --regex &lt;span class="s2"&gt;"^[0-9]+\$"&lt;/span&gt; &lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt; &lt;span class="s2"&gt;"Not a valid number of lines: '&lt;/span&gt;&lt;span class="nv"&gt;$lines&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 1
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb7dd00f" class="outline-2"&gt;
&lt;h2 id="orgb7dd00f"&gt;If It's a Text File, Use It&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgb7dd00f"&gt;
&lt;p&gt;
We'll be grabbing a line using the &lt;a href="https://man7.org/linux/man-pages/man1/shuf.1.html"&gt;shuf&lt;/a&gt; command. &lt;code&gt;shuf&lt;/code&gt; will hang if no filename is given and it will try and read binary files so first we have to test the filename to make sure it's a text file.
&lt;/p&gt;

&lt;p&gt;
To do the check I'm using the &lt;a href="https://www.man7.org/linux/man-pages/man1/file.1.html"&gt;&lt;code&gt;file&lt;/code&gt;&lt;/a&gt; command which will have the word "text" in the output if we give it a text file. Then I feed the output from &lt;code&gt;file&lt;/code&gt; to the &lt;code&gt;string match&lt;/code&gt; command. This command defaults to only return true if the whole string matches so I added a glob to both ends of the "text" string to match any string that contains it. So, in order to pass the test &lt;code&gt;filename&lt;/code&gt; has to have the name of a text file or we won't match the output of the &lt;code&gt;file&lt;/code&gt; command.
&lt;/p&gt;

&lt;p&gt;
First, though, we check if the &lt;code&gt;lines&lt;/code&gt; argument was okay and if it was and &lt;code&gt;filename&lt;/code&gt; passes its test then we can feed it to &lt;code&gt;shuf&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -ne 0&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;string match &lt;span class="s2"&gt;"*text*"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;file &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
   shuf -n &lt;span class="nv"&gt;$lines&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;test $OKAY -ne 0&lt;/code&gt; will return True if OKAY != 0. It will return an error if OKAY holds something other than a number.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;; and&lt;/code&gt; syntax is a short-circuit syntax that won't run the second test if the first one fails.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org28b83d4" class="outline-2"&gt;
&lt;h2 id="org28b83d4"&gt;Handle the Errors&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org28b83d4"&gt;
&lt;p&gt;
If the number of lines wasn't okay or the filename wasn't valid then we'll emit a help message. Since we emitted any error message about the number 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; ! &lt;span class="k"&gt;test&lt;/span&gt; -n &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt;  &lt;span class="s2"&gt;"**Missing Filename**"&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -ne 0
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="nv"&gt;$ERROR&lt;/span&gt; &lt;span class="s2"&gt;"Invalid File: '&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; OKAY 0
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# check filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0ce59eb" class="outline-2"&gt;
&lt;h2 id="org0ce59eb"&gt;Emit a Help Message&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0ce59eb"&gt;
&lt;p&gt;
If it had a valid number of lines and a valid filename then &lt;code&gt;OKAY&lt;/code&gt; will have a value of 1, otherwise it will have a value of 0 and we'll emit the help message.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$OKAY&lt;/span&gt; -eq &lt;span class="m"&gt;0&lt;/span&gt;     
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"\t%s\n"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
         &lt;span class="s2"&gt;"Output a random line or lines from a text file."&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
         &lt;span class="s2"&gt;"Usage:"&lt;/span&gt; &lt;span class="se"&gt;\ \&lt;/span&gt;
         &lt;span class="s2"&gt;"    choose &amp;lt;filename&amp;gt; [&amp;lt;number of lines&amp;gt;]"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c"&gt;# help message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8dfe448" class="outline-2"&gt;
&lt;h2 id="org8dfe448"&gt;One Last Thing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8dfe448"&gt;
&lt;p&gt;
If the user passes in a flag as a filename this will get passed to the &lt;code&gt;file&lt;/code&gt; command and in some cases this will cause it to emit a help message which will get passed to the &lt;code&gt;shuf&lt;/code&gt; command. It's probably not a good idea to let that happen, but this was only supposed to be an alias so I wouldn't have to remember the syntax for &lt;code&gt;shuf&lt;/code&gt;, so hopefully it'll work okay.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf20608d" class="outline-2"&gt;
&lt;h2 id="orgf20608d"&gt;Sources&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf20608d"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;string-match - match substrings â fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/string-match.html"&gt;https://fishshell.com/docs/current/cmds/string-match.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;test - perform tests on files and text â fish-shell 3.6.1 documentation [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://fishshell.com/docs/current/cmds/test.html"&gt;https://fishshell.com/docs/current/cmds/test.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;shuf(1) - Linux manual page [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://man7.org/linux/man-pages/man1/shuf.1.html"&gt;https://man7.org/linux/man-pages/man1/shuf.1.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;file(1) - Linux manual page [Internet]. [cited 2023 Jun 7]. Available from: &lt;a href="https://www.man7.org/linux/man-pages/man1/file.1.html"&gt;https://www.man7.org/linux/man-pages/man1/file.1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>choice</category><category>functions</category><category>randomness</category><guid>https://necromuralist.github.io/Give-The-Fish/posts/choose-function/index.html</guid><pubDate>Wed, 07 Jun 2023 18:30:31 GMT</pubDate></item></channel></rss>