#+BEGIN_COMMENT
.. title: Hades fish Config Sub-Section
.. slug: hades-fish-config-sub-section
.. date: 2024-04-02 12:59:45 UTC-07:00
.. tags: fish, configuration
.. category: Configuration
.. link: 
.. description: Hades'-specific section of config.fish.
.. type: text
.. status: 
.. updated: 2024-07-23 12:59:45 UTC-07:00

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2

#+begin_src sh :tangle ../dingehaufen/conf.d/hades.fish :exports none
<<firefox>>

<<monstery-hosts>>

<<proton-vpn>>

<<vterm-printf>>
#+end_src

This creates a file in ~give-the-fish/dingehaufen/~ named ~hades.fish~. To use it, link or copy the file into the folder =~/.config/fish/conf.d/=

* Firefox

This is where firefox stores user-specific information. I put it here so that I could make it easier to cleare the startup restore session so that when firefox starts up it doesn't try and open the page that was open when it was shutdown.

The file-name is generated so it should change with every installation.

#+begin_src fish :noweb-ref firefox
set --export MOZILLA_PROFILE "$HOME/snap/firefox/common/.mozilla/firefox/mg8ry5cl.default"
#+end_src

* Monstery Hosts

These are set so that other fish functions can use them.

#+begin_src fish :noweb-ref monstery-hosts
# wake monstery server
set --export ATHENA "04:92:26:c3:a6:c7"

# monstery LAN
set --export APOLLO "192.168.86.172"
#+end_src

* Proton VPN

The current command-line interface is deprecated so it gets uninstalled when you install the GUI, but the GUI was having problems so I uninstalled it and went back to using the CLI, but depending on what is installed this may or may not work (and it is kind of slow so it may not be a good idea anyway). Everytime you open a shell this will run (e.g. a byobu window or SSH session).

#+begin_src fish :noweb-ref proton-vpn
# check the vpn (requires the installation of the proton-vpn command-line command)
# if status --is-interactive
#   protonvpn-cli status
# end
#+end_src

**Okay:** so I installed the GUI again. It has fewer features than the CLI but after a year they haven't released the updated CLI and the community version is falling behind in  dependency-versions so for now, this is out.

* Vterm Printf

This is for [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]], weirdly enough. I didn't see anything wrong with running vterm (in emacs) without this function, but the README says we need it for some things.

#+begin_src fish :noweb-ref vterm-printf
function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end
#+end_src

- From the [[https://github.com/akermu/emacs-libvterm?tab=readme-ov-file#shell-side-configuration][Shell-Side Configuration]] section of the vterm README
- Although the vterm installation instructions recommends using Melpa, from what I can tell the version of emacs that ubuntu gives out through ~apt~ doesn't support dynamic module loading (a requirement to get vterm through melpa) so I installed it using ~apt~:

  + elpa-vterm
  + emacs-libvterm

  Installing ~elpa-vterm~ via ~apt~ automatically installs ~emacs-libvterm~.
