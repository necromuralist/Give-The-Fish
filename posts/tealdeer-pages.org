#+BEGIN_COMMENT
.. title: Tealdeer Pages
.. slug: tealdeer-pages
.. date: 2025-05-30 11:43:01 UTC-07:00
.. tags: tealdeer
.. category: Tealdeer
.. link: 
.. description: Pages for tealdeer.
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2

This is for configuring [[https://tealdeer-rs.github.io/tealdeer/][tealdeer]], a command-line help system.

The expected folder in this repository to put these pages is ~dingehaufen/tealdeer/pages/~. The default location that ~tealdeer~ will look for the pages is $~/.local/share/tealdeer/pages/~$.

* Patches
These are [[https://tealdeer-rs.github.io/tealdeer/usage_custom_pages.html#custom-patches][patches]] which extend existing help pages rather than replacing them. If you want to add a new command or replace the existing tealdeer help you would use [[https://tealdeer-rs.github.io/tealdeer/usage_custom_pages.html#custom-pages][pages]] instead (they go in the same folder, there's just a different file-name convention).

* Virtual Fish

#+begin_src noweb :tangle ../dingehaufen/tealdeer/pages/vf.patch.md
<<vf-list>>

<<vf-rebuild>>

<<vf-rebuild-another>>
#+end_src

** Check The Environment

This adds the build-state for the virtual-environments managed by virtualfish.

#+begin_src markdown :noweb-ref vf-list
- List Environments and the Current State (do they need to be rebuilt?):

`vf ls --details`
#+end_src

** Rebuild the Environment

This is the command to use after an Ubuntu upgrade where they change the python version and all the virtual environments are broken.

#+begin_src markdown :noweb-ref vf-rebuild
- Rebuild the current environment (e.g. after Ubuntu changes pip):

`vf upgrade --rebuild`
#+end_src

You can also rebuild a specific environment (not necessarily the one you're in).

#+begin_src markdown :noweb-ref vf-rebuild-another
- Rebuild a specific environment

`vf upgrade --rebuild {{virtualenv-name}}`
#+end_src

#+begin_notecard
If the environments are broken by an update, ~pipx~ is likely broken too, run this too, maybe:

 - ~pipx reinstall-all~
 - ~pip install setuptools --upgrade~
#+end_notecard

* pdfjam

#+begin_src noweb :tangle ../dingehaufen/tealdeer/pages/pdfjam.patch.md
<<pdfjam-letter-size>>
#+end_src

** Resize to Letter

#+begin_src markdown :noweb-ref pdfjam-letter-size
- Resize PDF document to letter-paper size

`pdfjam {{input-file}} --paper letter --outfile {{output-file-name}}`

`pdfjam {{input-file}} --papersize 8.5in,11in --outfile {{output-file-name}}`
#+end_src

* Emacs

#+begin_src noweb :tangle ../dingehaufen/tealdeer/pages/emacs.patch.md
<<emacs-sudo-file>>
#+end_src

** Open File With Sudo
Got this from [[https://stackoverflow.com/questions/95631/open-a-file-with-su-sudo-inside-emacs][a Stack Overflow Question]]. The user's question is asking for an alternative way to do this, but the answers tell him that it's the best way to do it after all (he thought it was using SSH but it uses a sub-shell).

#+begin_src markdown :noweb-ref emacs-sudo-file
- Open a (local) file with sudo.

`C-x C-f /sudo::/path/to/file`
#+end_src
